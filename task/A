{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spike and Burst Analysis with Visibility Graphs\n",
    "\n",
    "Este notebook muestra un flujo de trabajo básico para analizar registros electrofisiológicos en formato ABF:\n",
    "1. Cargar un archivo ABF y concatenar todos los sweeps.\n",
    "2. Detectar *spikes* mediante un umbral de voltaje.\n",
    "3. Agrupar *spikes* en *bursts* usando un criterio de intervalo interpico (ISI).\n",
    "4. Clasificar los *bursts* según su morfología (heurística simple).\n",
    "5. Guardar los resultados y visualizar las detecciones.\n",
    "\n",
    "> Más adelante, estos bursts se pueden representar como **visibility graphs** y analizarse con embeddings 2D/3D."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ==== Importación de librerías ====\n",
    "import pyabf                 # lectura de archivos ABF\n",
    "import numpy as np           # operaciones numéricas y manejo de arrays\n",
    "import pandas as pd          # manejo de tablas y estructuras tipo DataFrame\n",
    "import matplotlib.pyplot as plt  # graficación\n",
    "from scipy.signal import find_peaks  # detección de picos en señales\n",
    "%matplotlib widget           # backend interactivo en Jupyter (permite zoom y mover la figura)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cargar archivo ABF y concatenar sweeps\n",
    "Cada sweep del archivo ABF contiene un segmento de registro. Los unimos en un único vector de señal continua para facilitar la detección de picos y bursts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path = \"bursting/cell89basal.abf\"\n",
    "abf = pyabf.ABF(file_path)\n",
    "\n",
    "# Concatenamos todos los sweeps en un solo array\n",
    "signal = np.concatenate([abf.setSweep(i) or abf.sweepY for i in range(abf.sweepCount)])\n",
    "\n",
    "# Definimos el eje temporal\n",
    "dt = 1.0 / abf.dataRate  # duración de cada sample en segundos\n",
    "time = np.arange(len(signal)) * dt\n",
    "\n",
    "print(f\"File: {file_path} | sweeps: {abf.sweepCount} | total length: {time[-1]:.2f} s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Detección de spikes\n",
    "Usamos `scipy.signal.find_peaks` con un umbral de voltaje. Solo se consideran como spikes los puntos donde la señal cruza dicho umbral."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "threshold = -35  # mV, valor heurístico para este registro\n",
    "\n",
    "# find_peaks devuelve los índices de los picos que superan el umbral\n",
    "spike_indices, _ = find_peaks(signal, height=threshold)\n",
    "spike_times = time[spike_indices]\n",
    "\n",
    "print(f\"Detected {len(spike_indices)} spikes\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Detección de bursts\n",
    "Definimos bursts como secuencias de spikes consecutivos cuyo intervalo interpico (ISI) es menor que un umbral (`burst_threshold`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "isi = np.diff(spike_times)  # intervalos interpico\n",
    "burst_threshold = 0.3       # s, máximo ISI para considerar spikes dentro del mismo burst\n",
    "\n",
    "bursts = []\n",
    "current_burst = [spike_times[0]]\n",
    "for i in range(1, len(isi)):\n",
    "    if isi[i-1] < burst_threshold:\n",
    "        # Spike suficientemente cercano: sigue dentro del mismo burst\n",
    "        current_burst.append(spike_times[i])\n",
    "    else:\n",
    "        # ISI grande: cerramos el burst actual\n",
    "        if len(current_burst) > 1:\n",
    "            bursts.append((current_burst[0], current_burst[-1]))\n",
    "        current_burst = [spike_times[i]]\n",
    "\n",
    "# Comprobamos si el último grupo forma un burst\n",
    "if len(current_burst) > 1:\n",
    "    bursts.append((current_burst[0], current_burst[-1]))\n",
    "\n",
    "print(f\"Detected {len(bursts)} bursts\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clasificación de bursts\n",
    "Cada burst se clasifica en 3 categorías según la forma de la señal:\n",
    "- **Square Wave**: el mínimo dentro del burst está por encima de la línea base (señal menos negativa).\n",
    "- **Parabolic**: el mínimo está por debajo de la línea base (burst con valle marcado).\n",
    "- **Other**: no se ajusta claramente a las dos anteriores.\n",
    "\n",
    "La línea base se estima con el promedio de la señal antes y después del burst."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "square_wave_bursts, parabolic_bursts, other_bursts = [], [], []\n",
    "\n",
    "for i, (burst_start, burst_end) in enumerate(bursts):\n",
    "    # Señal dentro del burst\n",
    "    burst_mask = (time >= burst_start) & (time <= burst_end)\n",
    "    burst_min = np.min(signal[burst_mask])\n",
    "\n",
    "    # Media de la señal entre bursts adyacentes (línea base local)\n",
    "    prev_mean = np.mean(signal[(time > bursts[i-1][1]) & (time < burst_start)]) if i>0 else np.nan\n",
    "    next_mean = np.mean(signal[(time > burst_end) & (time < bursts[i+1][0])]) if i < len(bursts)-1 else np.nan\n",
    "    inter_mean = np.nanmean([prev_mean, next_mean])\n",
    "\n",
    "    # Clasificación heurística\n",
    "    if burst_min > inter_mean:\n",
    "        square_wave_bursts.append((burst_start, burst_end))\n",
    "    elif burst_min < inter_mean:\n",
    "        parabolic_bursts.append((burst_start, burst_end))\n",
    "    else:\n",
    "        other_bursts.append((burst_start, burst_end))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Guardar información de bursts en CSV\n",
    "Creamos un `DataFrame` con información clave de cada burst: número, tiempos de inicio y fin, y tipo de clasificación."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "burst_list = []\n",
    "\n",
    "for idx, (start, end) in enumerate(square_wave_bursts):\n",
    "    burst_list.append([idx+1, start, end, \"Square Wave\"])\n",
    "for idx, (start, end) in enumerate(parabolic_bursts):\n",
    "    burst_list.append([idx+1+len(square_wave_bursts), start, end, \"Parabolic\"])\n",
    "for idx, (start, end) in enumerate(other_bursts):\n",
    "    burst_list.append([idx+1+len(square_wave_bursts)+len(parabolic_bursts), start, end, \"Other\"])\n",
    "\n",
    "df_bursts = pd.DataFrame(burst_list, columns=[\"Burst_Number\", \"Start_Time_s\", \"End_Time_s\", \"Type\"])\n",
    "df_bursts.to_csv(\"burst_info_cell89.csv\", index=False)\n",
    "print(df_bursts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualización de spikes y bursts\n",
    "Se grafica la señal completa en gris, los spikes detectados como puntos rojos, y los bursts como áreas sombreadas según su tipo:\n",
    "- Azul: Square Wave\n",
    "- Verde: Parabolic\n",
    "- Naranja: Other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,4))\n",
    "plt.plot(time, signal, lw=0.2, label=\"Signal\")\n",
    "plt.plot(spike_times, signal[spike_indices], 'r.', markersize=3, label=\"Spikes\")\n",
    "\n",
    "for start, end in square_wave_bursts:\n",
    "    plt.axvspan(start, end, color='blue', alpha=0.3, label=\"Square Wave\")\n",
    "for start, end in parabolic_bursts:\n",
    "    plt.axvspan(start, end, color='green', alpha=0.3, label=\"Parabolic\")\n",
    "for start, end in other_bursts:\n",
    "    plt.axvspan(start, end, color='orange', alpha=0.3, label=\"Other\")\n",
    "\n",
    "plt.xlabel(\"Time (s)\")\n",
    "plt.ylabel(\"Voltage (mV)\")\n",
    "plt.title(\"Detected Spikes and Burst Types\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
